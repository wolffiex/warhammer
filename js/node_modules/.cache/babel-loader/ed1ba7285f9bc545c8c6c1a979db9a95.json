{"ast":null,"code":"var _jsxFileName = \"/Users/adam/dev/warhammer/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\n\nfunction TeamName(props) {\n  const [name, setName] = useLocalStorage(\"Enter Team Name\");\n\n  const change = event => setName(event.target.value);\n\n  return /*#__PURE__*/React.createElement(\"input\", {\n    class: \"team-name\",\n    id: \"teamname\",\n    name: \"teamname\",\n    value: name,\n    onChange: change,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }\n  });\n}\n\nfunction App() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    class: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TeamName, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"pure-control-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"aligned-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }, \"Username\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"aligned-name\",\n    placeholder: \"Username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    class: \"pure-form-message-inline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }\n  }, \"This is a required field.\")), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"pure-control-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"aligned-password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }\n  }, \"Password\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    id: \"aligned-password\",\n    placeholder: \"Password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  })))));\n}\n\nexport default App; // Hook\n\nfunction useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = React.useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key); // Parse stored json or if none return initialValue\n\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  }); // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value; // Save state\n\n      setStoredValue(valueToStore); // Save to local storage\n\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}","map":{"version":3,"sources":["/Users/adam/dev/warhammer/src/App.js"],"names":["React","TeamName","props","name","setName","useLocalStorage","change","event","target","value","App","key","initialValue","storedValue","setStoredValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","setValue","valueToStore","Function","setItem","stringify"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction TeamName(props) {\n    const [name, setName] = useLocalStorage(\"Enter Team Name\");\n    const change = (event) => setName(event.target.value)\n    return (\n        <input class=\"team-name\" id=\"teamname\" name=\"teamname\" value={name} onChange={change}/>\n    );\n}\n\nfunction App() {\n  return (\n    <div class=\"container\">\n    <form>\n      <TeamName />\n        <fieldset>\n        <div class=\"pure-control-group\">\n            <label htmlFor=\"aligned-name\">Username</label>\n            <input type=\"text\" id=\"aligned-name\" placeholder=\"Username\" />\n            <span class=\"pure-form-message-inline\">This is a required field.</span>\n        </div>\n        <div class=\"pure-control-group\">\n            <label htmlFor=\"aligned-password\">Password</label>\n            <input type=\"password\" id=\"aligned-password\" placeholder=\"Password\" />\n        </div>\n        </fieldset>\n    </form>\n    </div>\n  );\n}\n\nexport default App;\n\n// Hook\nfunction useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = React.useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\n"]},"metadata":{},"sourceType":"module"}