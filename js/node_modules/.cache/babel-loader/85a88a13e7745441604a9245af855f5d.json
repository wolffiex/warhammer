{"ast":null,"code":"var _jsxFileName = \"/Users/adam/dev/warhammer/src/App.js\";\nimport React, { useState } from 'react';\nimport Roster from './roster';\nimport './App.css';\nimport MultiSelect from \"react-multi-select-component\";\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport 'react-tabs/style/react-tabs.css';\n\nfunction Name(props) {\n  const [name, setName] = useLocalStorage(props.storageKey, \"Enter Name\");\n\n  const change = event => setName(event.target.value);\n\n  return /*#__PURE__*/React.createElement(\"input\", {\n    className: \"team-name\",\n    id: \"teamname\",\n    name: \"teamname\",\n    value: name,\n    onChange: change,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  });\n}\n\nfunction App() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Name, {\n    storageKey: \"teamName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Tabs, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TabList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 21\n    }\n  }, \"Roster\"), /*#__PURE__*/React.createElement(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 21\n    }\n  }, \"Roles\"), /*#__PURE__*/React.createElement(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 21\n    }\n  }, \"Weapons\")), /*#__PURE__*/React.createElement(TabPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }\n  }, Roster()), /*#__PURE__*/React.createElement(TabPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }\n  }, \"kk\"), /*#__PURE__*/React.createElement(TabPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }\n  }, \" kk\")));\n}\n\nexport default App; // Hook\n\nfunction useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key); // Parse stored json or if none return initialValue\n\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  }); // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value; // Save state\n\n      setStoredValue(valueToStore); // Save to local storage\n\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}","map":{"version":3,"sources":["/Users/adam/dev/warhammer/src/App.js"],"names":["React","useState","Roster","MultiSelect","Tab","Tabs","TabList","TabPanel","Name","props","name","setName","useLocalStorage","storageKey","change","event","target","value","App","key","initialValue","storedValue","setStoredValue","item","window","localStorage","getItem","JSON","parse","error","console","log","setValue","valueToStore","Function","setItem","stringify"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport Roster from './roster';\nimport './App.css';\nimport MultiSelect from \"react-multi-select-component\";\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport 'react-tabs/style/react-tabs.css';\n\n\nfunction Name(props) {\n    const [name, setName] = useLocalStorage(props.storageKey, \"Enter Name\");\n    const change = (event) => setName(event.target.value)\n    return (\n        <input className=\"team-name\" id=\"teamname\" name=\"teamname\" value={name} onChange={change}/>\n    );\n}\n\nfunction App() {\n    return (\n        <div className=\"container\">\n            <header><Name storageKey=\"teamName\" /></header>\n            <Tabs>\n                <TabList>\n                    <Tab>Roster</Tab>\n                    <Tab>Roles</Tab>\n                    <Tab>Weapons</Tab>\n                </TabList>\n                <TabPanel>\n                    {Roster()}\n                </TabPanel>\n                <TabPanel>kk\n                </TabPanel>\n                <TabPanel> kk\n                </TabPanel>\n            </Tabs>\n        </div>\n    );\n}\n\nexport default App;\n\n// Hook\nfunction useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\n"]},"metadata":{},"sourceType":"module"}